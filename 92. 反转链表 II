package main

import (
    "fmt"
)

type ListNode struct {
    Val int
    Next *ListNode
}

func reverseBetween(head *ListNode, left int, right int) *ListNode {
    if left >= right {
        return head
    }
    // 记录区间的 头结点 和 尾节点
    var leftp, rightp *ListNode = nil, nil
    // 记录区间左侧的尾节点
    var betweenLeftTail *ListNode = nil
    for p, index := head, 1; p != nil; p, index = p.Next, index+1 {
        if left > 1 && index == left-1 {
            betweenLeftTail = p
            continue
        }
        if index == left {
            leftp = p
            continue
        }
        if index == right {
            rightp = p
        }
    }
    // 记录区间右侧的头节点
    betweenRightHead := rightp.Next
    // 反转链表
    lowp, fastp := leftp, leftp.Next
    for lowp != rightp {
        p := fastp.Next
        fastp.Next = lowp
        lowp = fastp
        fastp = p
    }
    if betweenLeftTail == nil {
        head = rightp
    } else {
        betweenLeftTail.Next = rightp
    }
    leftp.Next = betweenRightHead

    return head
}

func initListNode(count int) *ListNode {
    if count < 1 {
        return nil
    }
    var head, p *ListNode = nil, nil
    for index := 1; index <= count; index++ {
        if index == 1 {
            head = &ListNode{
                Val: index,
                Next: nil,
            }
            p = head
            continue
        }
        p.Next = &ListNode{
            Val: index,
            Next: nil,
        }
        p = p.Next
    }
    return head
}

func main() {
    var head *ListNode = initListNode(5)

    p := head
    for p != nil {
        fmt.Printf("node val: %d\n", p.Val)
        p = p.Next
    }

    head = reverseBetween(head, 1, 4)
    fmt.Printf("after reverse\n")   
    for head != nil {
        fmt.Printf("node val: %d\n", head.Val)
        head = head.Next
    }
}
